// Code generated by shogo82148/go-http-logger/codegen.go; DO NOT EDIT

package httplogger

import "net/http"

func wrap(rw *responseWriter) http.ResponseWriter {
	_, i0 := rw.rw.(http.Flusher)
	_, i1 := rw.rw.(http.CloseNotifier)
	_, i2 := rw.rw.(http.Hijacker)
	_, i3 := rw.rw.(http.Pusher)
	switch {
	case !i0 && !i1 && !i2 && !i3:
		return struct {
			http.ResponseWriter
		}{rw}
	case !i0 && !i1 && !i2 && i3:
		return struct {
			http.ResponseWriter
			http.Pusher
		}{rw, rw}
	case !i0 && !i1 && i2 && !i3:
		return struct {
			http.ResponseWriter
			http.Hijacker
		}{rw, rw}
	case !i0 && !i1 && i2 && i3:
		return struct {
			http.ResponseWriter
			http.Hijacker
			http.Pusher
		}{rw, rw, rw}
	case !i0 && i1 && !i2 && !i3:
		return struct {
			http.ResponseWriter
			http.CloseNotifier
		}{rw, rw}
	case !i0 && i1 && !i2 && i3:
		return struct {
			http.ResponseWriter
			http.CloseNotifier
			http.Pusher
		}{rw, rw, rw}
	case !i0 && i1 && i2 && !i3:
		return struct {
			http.ResponseWriter
			http.CloseNotifier
			http.Hijacker
		}{rw, rw, rw}
	case !i0 && i1 && i2 && i3:
		return struct {
			http.ResponseWriter
			http.CloseNotifier
			http.Hijacker
			http.Pusher
		}{rw, rw, rw, rw}
	case i0 && !i1 && !i2 && !i3:
		return struct {
			http.ResponseWriter
			http.Flusher
		}{rw, rw}
	case i0 && !i1 && !i2 && i3:
		return struct {
			http.ResponseWriter
			http.Flusher
			http.Pusher
		}{rw, rw, rw}
	case i0 && !i1 && i2 && !i3:
		return struct {
			http.ResponseWriter
			http.Flusher
			http.Hijacker
		}{rw, rw, rw}
	case i0 && !i1 && i2 && i3:
		return struct {
			http.ResponseWriter
			http.Flusher
			http.Hijacker
			http.Pusher
		}{rw, rw, rw, rw}
	case i0 && i1 && !i2 && !i3:
		return struct {
			http.ResponseWriter
			http.Flusher
			http.CloseNotifier
		}{rw, rw, rw}
	case i0 && i1 && !i2 && i3:
		return struct {
			http.ResponseWriter
			http.Flusher
			http.CloseNotifier
			http.Pusher
		}{rw, rw, rw, rw}
	case i0 && i1 && i2 && !i3:
		return struct {
			http.ResponseWriter
			http.Flusher
			http.CloseNotifier
			http.Hijacker
		}{rw, rw, rw, rw}
	case i0 && i1 && i2 && i3:
		return struct {
			http.ResponseWriter
			http.Flusher
			http.CloseNotifier
			http.Hijacker
			http.Pusher
		}{rw, rw, rw, rw, rw}
	}
	panic("unreachable")
}
